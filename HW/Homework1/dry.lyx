#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language hebrew
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "David"
\font_sans "default" "David"
\font_typewriter "default" "David"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 2cm
\rightmargin 1cm
\bottommargin 3cm
\headheight 0cm
\headsep 0cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "20pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\paragraph_spacing double
\align center

\series bold
\size huge
)
\numeric on
236319
\numeric off
( שפות תכנות | תרגיל בית
\family roman
\shape up
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\shape default
\emph default
\numeric on
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
1
\family roman
\shape up
\emph off
\numeric off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\end_layout

\end_inset


\end_layout

\begin_layout Section*
שאלה
\family roman
\series bold
\shape up
\size larger
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\numeric on
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
1
\numeric off
.
\end_layout

\begin_layout Enumerate

\lang english
The expression outputs the string "s a f 0 t", and is written in a compressed
 and obfuscated style.
 This style is sometimes used in code golf, where the goal is to write code
 that is as short as possible, or in obfuscation challenges, where the goal
 is to make the code difficult to understand or reverse-engineer.
\end_layout

\begin_layout Enumerate

\lang english
The expression
\begin_inset Newline newline
\end_inset

 console.log(+!+[]+!+[], +!+[]+!+[]+!+[],+!+[]+!+[]+!+[]+!+[]+!+[]+!+[],
 +!+[]+!+[]+!+[],+!+[], +!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]) outputs
 
\begin_inset Quotes eld
\end_inset

2 3 6 3 1 9".
\end_layout

\begin_layout Subsection*

\numeric on
3.1
\end_layout

\begin_layout Standard

\lang english
Both Pascal and C programming languages support the concept of enumerations,
 which allow you to define a set of named constants with underlying integer
 values.
 However, there are some differences in how enumerations are implemented
 and used in Pascal and C.
 Here are some of the main differences:
\end_layout

\begin_layout Enumerate

\lang english
Syntax: In Pascal, you define an enumeration type using the "type" keyword,
 followed by the name of the type and the list of possible values In C,
 you define an enumeration type using the "enum" keyword, followed by the
 name of the type and the list of possible values (each separated by a comma).
\end_layout

\begin_layout Enumerate

\lang english
Default values: In Pascal, the first value in an enumeration list is assigned
 the value 0 by default, and each subsequent value is assigned the next
 integer value.
 However, you can explicitly assign values to each member if you want.
 In C, the first value in an enumeration list is assigned the value 0 by
 default, and each subsequent value is assigned the next integer value.
 However, you can explicitly assign values to each member if you want.
\end_layout

\begin_layout Enumerate

\lang english
Scope: In Pascal, enumeration types are defined at the same level as other
 types, such as records and arrays.
 They can be used in any part of the program where a type is expected.In
 C, enumeration types are usually defined in the global scope (outside of
 any function), and can be used in any part of the program where a type
 is expected.
 However, you can also define enumeration types within a function, in which
 case they can only be used within that function
\end_layout

\begin_layout Enumerate

\lang english
Type safety: In Pascal, enumeration types are distinct types that are not
 compatible with other types, even if they have the same underlying integer
 values.
 In C, enumeration types are represented as integers, and are compatible
 with other integer types.
\end_layout

\begin_layout Subsection*

\numeric on
3.2
\end_layout

\begin_layout Standard

\lang english
In Pascal, a set type is a special type that represents a collection of
 distinct values of a given base type.
 There are some restrictions on set types in Pascal:
\end_layout

\begin_layout Enumerate

\lang english
The base type must be an ordinal type, which means it can be ordered and
 assigned integer values.
 This includes integer, char, boolean, enumeration types, and subrange types.
\end_layout

\begin_layout Enumerate

\lang english
The maximum number of elements in a set depends on the size of the base
 type.
 For example, if the base type is an enumeration with 8 values, the maximum
 number of elements in the set is 256 (2^8).
\end_layout

\begin_layout Enumerate

\lang english
The elements of a set are represented as bits in memory, and the size of
 a set depends on the number of elements in the base type.
 For example, a set of days of the week requires one byte of memory, since
 there are 7 elements.
\end_layout

\begin_layout Standard

\lang english
The restrictions on set types exist for several reasons:
\end_layout

\begin_layout Enumerate

\lang english
Efficiency: By representing sets as bit patterns in memory, Pascal can perform
 set operations such as union and intersection using bitwise operations,
 which are fast and efficient.
\end_layout

\begin_layout Enumerate

\lang english
Type safety: By restricting sets to ordinal types, Pascal ensures that set
 operations are meaningful and well-defined.
\end_layout

\begin_layout Enumerate

\lang english
Compiler compatibility: The restrictions on sets were designed to ensure
 that Pascal programs could be compiled and executed on a wide range of
 computer architectures and operating systems.
\end_layout

\end_body
\end_document
